Here’s the Updated Migration Process Documentation for moving from Bitbucket + Jenkins + RLM to GitHub + GitHub Actions, integrating SonarQube and Checkmarx security and quality checks.


---

Migration Process: Bitbucket + Jenkins + RLM to GitHub + GitHub Actions


---

1. Preparation Phase

A. Assess Current CI/CD Setup

Document all repositories, branches, Jenkins jobs, and build triggers.

Identify secrets, build dependencies, environment variables, and deployment environments.


B. Set Up GitHub Environment

1. Create repositories in GitHub.


2. Enable GitHub Actions in each repository.


3. Configure repository access and permissions.


4. Install GitHub CLI:

sudo apt install gh
gh auth login




---

2. Install Migration Tools

1. Install GitHub Actions Importer:

gh extension install github/gh-actions-importer




---

3. Migration Process

A. Dry-Run Migration (Testing)

1. Test migrating Jenkins jobs:

gh actions-importer dry-run jenkins --source-url <JENKINS_JOB_URL> --output-dir <OUTPUT_DIR>


2. Review the output files for correctness.




---

B. Migrate Jenkins Jobs and Bitbucket Repos

1. Migrate Jenkins jobs:

gh actions-importer migrate jenkins --source-url <JENKINS_JOB_URL> --target-url <GITHUB_REPO_URL> --output-dir <OUTPUT_DIR>


2. Migrate Bitbucket repositories:

gh actions-importer migrate bitbucket --source-url <BITBUCKET_REPO_URL> --target-url <GITHUB_REPO_URL> --output-dir <OUTPUT_DIR>




---

4. Implement GitHub Actions Workflow

A. Create Workflow File (.github/workflows/ci.yml):

name: CI Pipeline with Security and Code Analysis

on:
  push:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'  # Adjust as needed

      - name: Run Build
        run: |
          ./gradlew build   # Replace with your build command

      - name: SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=your_project_key \
            -Dsonar.organization=your_org \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Checkmarx Scan
        env:
          CHECKMARX_API_KEY: ${{ secrets.CHECKMARX_API_KEY }}
          CHECKMARX_PROJECT_ID: ${{ secrets.CHECKMARX_PROJECT_ID }}
        run: |
          checkmarx scan \
            --project $CHECKMARX_PROJECT_ID \
            --api-key $CHECKMARX_API_KEY


---

B. Configure Secrets in GitHub

1. Go to Settings → Secrets and Variables → Actions in GitHub.


2. Add the following secrets securely:

SONAR_HOST_URL

SONAR_TOKEN

CHECKMARX_API_KEY

CHECKMARX_PROJECT_ID





---

5. Post-Migration Tasks

A. Test and Validate:

Commit code to the GitHub repository to trigger the workflow.

Monitor runs in the Actions tab in GitHub.

Review SonarQube and Checkmarx reports through their dashboards.


B. Configure Notifications:

Use Marketplace Actions for email or Slack notifications.


C. Security and Permissions:

Manage repository permissions.

Enable GitHub security features (Dependabot, Code Scanning).



---

6. Maintenance and Monitoring

1. Monitoring:

Use GitHub Actions logs to monitor workflows.

Apply periodic audits for security and compliance.



2. Continuous Improvements:

Optimize CI/CD pipelines for speed and reliability.

Apply security updates and patches as needed.





---

This process ensures a smooth migration while incorporating code quality and security scanning into your GitHub Actions CI/CD pipeline. Let me know if you need any adjustments!





2nd Method


Here’s a detailed Migration Process Document for moving from Bitbucket + Jenkins + RLM to GitHub + GitHub Actions without using GitHub Actions Importer, configuring everything manually.


---

Manual Migration Process: Bitbucket + Jenkins + RLM to GitHub + GitHub Actions


---

1. Preparation Phase

A. Assess Current CI/CD Setup

Document all repositories, branches, Jenkins jobs, and triggers.

Identify build scripts, dependencies, environment variables, secrets, and deployment targets.



---

2. Set Up GitHub Environment

1. Create Repositories:

Create repositories in GitHub manually or via GitHub CLI:

gh repo create <repo_name>



2. Set Permissions:

Configure repository permissions.

Add teams and collaborators.



3. Enable GitHub Actions:

Navigate to Settings → Actions → General and enable Actions if disabled.





---

3. Migrate Code Repositories from Bitbucket

1. Clone Repositories from Bitbucket:

git clone https://bitbucket.org/<workspace>/<repo>.git


2. Push Repositories to GitHub:

cd <repo>
git remote set-url origin https://github.com/<org>/<repo>.git
git push --all origin
git push --tags




---

4. CI/CD Workflow Configuration in GitHub Actions

1. Create Workflow Files:

In each repository, create a directory .github/workflows.

Create a workflow file ci.yml:


name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
      - feature/*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Run Build
        run: |
          ./gradlew build   # Replace with your build command

      - name: SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonarqube \
            -Dsonar.projectKey=your_project_key \
            -Dsonar.organization=your_org \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Checkmarx Scan
        env:
          CHECKMARX_API_KEY: ${{ secrets.CHECKMARX_API_KEY }}
          CHECKMARX_PROJECT_ID: ${{ secrets.CHECKMARX_PROJECT_ID }}
        run: |
          checkmarx scan \
            --project $CHECKMARX_PROJECT_ID \
            --api-key $CHECKMARX_API_KEY




---

5. Configure Secrets

1. Navigate to Settings → Secrets and Variables → Actions.


2. Add the following secrets securely:

SONAR_HOST_URL

SONAR_TOKEN

CHECKMARX_API_KEY

CHECKMARX_PROJECT_ID





---

6. Deployment Process Setup (Replacing RLM)

1. Use GitHub Actions for Deployment:

Add a deployment job in the workflow file:


deploy:
  needs: build
  runs-on: ubuntu-latest

  steps:
    - name: Deploy Application
      env:
        DEPLOY_API_KEY: ${{ secrets.DEPLOY_API_KEY }}
      run: |
        echo "Deploying the application..."
        ./deploy.sh  # Custom deployment script


2. Use GitHub Environments:

Navigate to Settings → Environments.

Add environments like staging, production.

Configure approvals and environment secrets.





---

7. Post-Migration Tasks

A. Test and Validate:

Commit changes to the GitHub repository to trigger the workflow.

Monitor runs in the Actions tab.

Review SonarQube and Checkmarx results on their dashboards.


B. Notifications:

Add notification actions for email or Slack from the GitHub Marketplace.


C. Documentation and Training:

Update team documentation.

Train team members on GitHub Actions.



---

8. Maintenance and Monitoring

1. Monitoring:

Use GitHub Actions logs to monitor workflows.

Enable alerts for build failures.



2. Security and Compliance:

Enable Dependabot alerts and security scanning.

Perform regular audits of CI/CD configurations.





---

This manual process fully replaces the existing Bitbucket + Jenkins + RLM setup with GitHub + GitHub Actions, including repository migration, CI/CD pipeline setup, and security integration. Let me know if you'd like additional sections!

